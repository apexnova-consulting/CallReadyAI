import { NextResponse } from "next/server"
import { getSession } from "@/lib/auth"
import { getBrief } from "@/lib/brief-storage"
import { Resend } from "resend"

// Force dynamic rendering for this route
export const dynamic = 'force-dynamic'

export async function POST(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getSession()
    if (!session?.user?.id) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
    }

    // Get brief data from storage
    const brief = getBrief(params.id)
    
    if (!brief) {
      return NextResponse.json({ error: "Brief not found" }, { status: 404 })
    }

    // Create HTML email content
    const htmlContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <title>CallReady AI - Sales Call Brief</title>
          <style>
            body {
              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
              line-height: 1.6;
              color: #333;
              max-width: 600px;
              margin: 0 auto;
              padding: 20px;
            }
            .header {
              text-align: center;
              margin-bottom: 30px;
              padding-bottom: 20px;
              border-bottom: 2px solid #667eea;
            }
            .header h1 {
              color: #667eea;
              font-size: 24px;
              margin: 0;
            }
            .prospect-info {
              background: #f8fafc;
              padding: 20px;
              border-radius: 8px;
              margin-bottom: 25px;
            }
            .prospect-info h2 {
              margin: 0 0 10px 0;
              color: #374151;
            }
            .prospect-info p {
              margin: 5px 0;
              color: #6b7280;
            }
            .section {
              margin-bottom: 25px;
            }
            .section h3 {
              color: #374151;
              font-size: 16px;
              margin-bottom: 10px;
              padding-bottom: 5px;
              border-bottom: 1px solid #e5e7eb;
            }
            .section p {
              color: #4b5563;
              margin: 0;
              white-space: pre-wrap;
            }
            .footer {
              margin-top: 30px;
              padding-top: 20px;
              border-top: 1px solid #e5e7eb;
              text-align: center;
              color: #9ca3af;
              font-size: 12px;
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>CallReady AI</h1>
            <p>Sales Call Brief</p>
          </div>

          <div class="prospect-info">
            <h2>${brief.prospectName} - ${brief.companyName}</h2>
            <p><strong>Role:</strong> ${brief.role}</p>
            ${brief.meetingLink ? `<p><strong>Meeting Link:</strong> ${brief.meetingLink}</p>` : ""}
            <p><strong>Generated:</strong> ${new Date(brief.createdAt).toLocaleDateString()}</p>
          </div>

          <div class="section">
            <h3>Prospect Overview</h3>
            <p>${brief.overview}</p>
          </div>

          <div class="section">
            <h3>Company Context</h3>
            <p>${brief.context}</p>
          </div>

          <div class="section">
            <h3>Potential Pain Points</h3>
            <p>${brief.painPoints}</p>
          </div>

          <div class="section">
            <h3>Key Talking Points</h3>
            <p>${brief.talkingPoints}</p>
          </div>

          <div class="section">
            <h3>Questions to Ask</h3>
            <p>${brief.questions}</p>
          </div>

          <div class="section">
            <h3>Competitive Insights</h3>
            <p>${brief.competitive}</p>
          </div>

          ${brief.notes ? `
          <div class="section">
            <h3>Additional Notes</h3>
            <p>${brief.notes}</p>
          </div>
          ` : ""}

          <div class="footer">
            <p>Generated by CallReady AI on ${new Date().toLocaleDateString()}</p>
          </div>
        </body>
      </html>
    `

    // Initialize Resend only if API key is available
    if (!process.env.RESEND_API_KEY) {
      return NextResponse.json(
        { error: "Email service not configured" },
        { status: 503 }
      )
    }

    const resend = new Resend(process.env.RESEND_API_KEY)

    // Send email using Resend
    const { data, error } = await resend.emails.send({
      from: 'CallReady AI <noreply@callreadyai.com>',
      to: [session.user.email!],
      subject: `Sales Call Brief: ${brief.prospectName} - ${brief.companyName}`,
      html: htmlContent,
    })

    if (error) {
      console.error("Resend error:", error)
      return NextResponse.json(
        { error: "Failed to send email" },
        { status: 500 }
      )
    }

    return NextResponse.json({ success: true, messageId: data?.id })
  } catch (error) {
    console.error("Email error:", error)
    return NextResponse.json(
      { error: "Failed to send email" },
      { status: 500 }
    )
  }
}
