import { NextResponse } from "next/server"
import { getSession } from "@/lib/auth"
import { getBrief } from "@/lib/brief-storage"
import PDFDocument from "pdfkit"

export const runtime = "nodejs"

export async function POST(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    console.log("PDF generation request for brief ID:", params.id)
    
    const session = await getSession()
    if (!session?.user?.id) {
      console.log("No session found for PDF generation")
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
    }

    console.log("Session found for PDF generation:", session.user.id)

    // Get brief data from storage
    let brief = getBrief(params.id)
    console.log("Brief found in server storage:", brief ? "Yes" : "No")
    
    // If not found in server storage, try to get from request body (client can send it)
    if (!brief) {
      try {
        const requestBody = await request.json()
        if (requestBody.brief) {
          brief = requestBody.brief
          console.log("Brief found in request body")
        }
      } catch (error) {
        console.log("No brief in request body")
      }
    }
    
    if (!brief) {
      console.log("Brief not found in storage for ID:", params.id)
      return NextResponse.json({ error: "Brief not found" }, { status: 404 })
    }

    console.log("Generating PDF for brief:", brief.prospectName, "at", brief.companyName)

    // Create PDF document
    const doc = new PDFDocument({ margin: 50 })
    const buffers: Buffer[] = []
    
    doc.on('data', buffers.push.bind(buffers))
    
    // Header
    doc.fontSize(24)
       .fillColor('#667eea')
       .text('CallReady AI', { align: 'center' })
    
    doc.fontSize(16)
       .fillColor('#6b7280')
       .text('Sales Call Brief', { align: 'center' })
       .moveDown(2)

    // Prospect Info
    doc.fontSize(18)
       .fillColor('#374151')
       .text(`${brief.prospectName} - ${brief.companyName}`)
    
    doc.fontSize(12)
       .fillColor('#6b7280')
       .text(`Role: ${brief.role}`)
    
    if (brief.meetingLink) {
      doc.text(`Meeting Link: ${brief.meetingLink}`)
    }
    
    doc.text(`Generated: ${new Date(brief.createdAt).toLocaleDateString()}`)
       .moveDown(1)

    // Helper function to add sections
    const addSection = (title: string, content: string) => {
      doc.fontSize(14)
         .fillColor('#374151')
         .text(title, { underline: true })
         .moveDown(0.5)
      
      doc.fontSize(11)
         .fillColor('#4b5563')
         .text(content, { 
           lineGap: 3,
           paragraphGap: 5
         })
         .moveDown(1)
    }

    // Add all sections
    addSection('Prospect Overview', brief.overview)
    addSection('Company Context', brief.context)
    addSection('Potential Pain Points', brief.painPoints)
    addSection('Key Talking Points', brief.talkingPoints)
    addSection('Questions to Ask', brief.questions)
    addSection('Competitive Insights', brief.competitive)

    if (brief.notes) {
      addSection('Additional Notes', brief.notes)
    }

    // Footer
    doc.fontSize(10)
       .fillColor('#9ca3af')
       .text(`Generated by CallReady AI on ${new Date().toLocaleDateString()}`, 
             50, doc.page.height - 50, { align: 'center' })

    doc.end()

    // Wait for PDF to be generated
    const pdfBuffer = await new Promise<Buffer>((resolve) => {
      doc.on('end', () => {
        resolve(Buffer.concat(buffers))
      })
    })

    return new NextResponse(pdfBuffer, {
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `attachment; filename="${brief.prospectName}-${brief.companyName}-Brief.pdf"`,
      },
    })
  } catch (error) {
    console.error("PDF generation error:", error)
    return NextResponse.json(
      { error: "Failed to generate PDF" },
      { status: 500 }
    )
  }
}
