"use client"

import { useState } from "react"
import Link from "next/link"

interface Brief {
  id: string
  prospectName: string
  companyName: string
  role: string
  meetingLink?: string
  notes?: string
  overview: string
  context: string
  painPoints: string
  talkingPoints: string
  questions: string
  competitive: string
  createdAt: string
}

interface BriefViewProps {
  brief: Brief
}

export default function BriefView({ brief }: BriefViewProps) {
  const [isLoading, setIsLoading] = useState(false)
  const [action, setAction] = useState<string | null>(null)

  const handleAction = async (actionType: string) => {
    setIsLoading(true)
    setAction(actionType)

    try {
      let response: Response
      
      switch (actionType) {
        case "copy":
          await navigator.clipboard.writeText(formatBriefForCopy(brief))
          alert("Brief copied to clipboard!")
          break
        case "pdf":
          response = await fetch(`/api/briefs/${brief.id}/pdf`)
          if (response.ok) {
            const blob = await response.blob()
            const url = window.URL.createObjectURL(blob)
            const a = document.createElement("a")
            a.href = url
            a.download = `${brief.prospectName}-${brief.companyName}-Brief.pdf`
            document.body.appendChild(a)
            a.click()
            window.URL.revokeObjectURL(url)
            document.body.removeChild(a)
          } else {
            alert("Failed to generate PDF")
          }
          break
        case "email":
          response = await fetch(`/api/briefs/${brief.id}/email`, {
            method: "POST",
          })
          if (response.ok) {
            alert("Brief emailed successfully!")
          } else {
            alert("Failed to email brief")
          }
          break
      }
    } catch (error) {
      alert("An error occurred. Please try again.")
    } finally {
      setIsLoading(false)
      setAction(null)
    }
  }

  const formatBriefForCopy = (brief: Brief) => {
    return `CallReady AI - Sales Call Brief

${brief.prospectName} - ${brief.companyName}
${brief.role}
${brief.meetingLink ? `Meeting Link: ${brief.meetingLink}` : ""}

PROSPECT OVERVIEW
${brief.overview}

COMPANY CONTEXT
${brief.context}

POTENTIAL PAIN POINTS
${brief.painPoints}

KEY TALKING POINTS
${brief.talkingPoints}

QUESTIONS TO ASK
${brief.questions}

COMPETITIVE INSIGHTS
${brief.competitive}

Generated by CallReady AI on ${new Date(brief.createdAt).toLocaleDateString()}`
  }

  const sections = [
    { title: "Prospect Overview", content: brief.overview },
    { title: "Company Context", content: brief.context },
    { title: "Potential Pain Points", content: brief.painPoints },
    { title: "Key Talking Points", content: brief.talkingPoints },
    { title: "Questions to Ask", content: brief.questions },
    { title: "Competitive Insights", content: brief.competitive },
  ]

  return (
    <div style={{ padding: "2rem", maxWidth: "1000px", margin: "0 auto" }}>
      {/* Header */}
      <div style={{ marginBottom: "2rem" }}>
        <Link 
          href="/dashboard"
          style={{ 
            color: "#667eea", 
            textDecoration: "none", 
            fontSize: "0.875rem",
            marginBottom: "1rem",
            display: "inline-block"
          }}
        >
          ← Back to Dashboard
        </Link>
        <h1 style={{ fontSize: "2rem", fontWeight: "bold", marginBottom: "0.5rem" }}>
          {brief.prospectName} - {brief.companyName}
        </h1>
        <p style={{ color: "#6b7280", marginBottom: "0.5rem" }}>
          {brief.role}
        </p>
        <p style={{ color: "#9ca3af", fontSize: "0.875rem" }}>
          Generated on {new Date(brief.createdAt).toLocaleDateString()}
        </p>
        {brief.meetingLink && (
          <p style={{ marginTop: "0.5rem" }}>
            <a 
              href={brief.meetingLink} 
              target="_blank" 
              rel="noopener noreferrer"
              style={{ color: "#667eea", textDecoration: "none" }}
            >
              Join Meeting →
            </a>
          </p>
        )}
      </div>

      {/* Actions */}
      <div style={{ 
        display: "flex", 
        gap: "1rem", 
        marginBottom: "2rem",
        flexWrap: "wrap"
      }}>
        <button
          onClick={() => handleAction("copy")}
          disabled={isLoading}
          style={{
            padding: "0.75rem 1.5rem",
            backgroundColor: "#f3f4f6",
            color: "#374151",
            border: "none",
            borderRadius: "0.5rem",
            fontSize: "0.875rem",
            fontWeight: "500",
            cursor: isLoading ? "not-allowed" : "pointer",
            opacity: isLoading && action === "copy" ? 0.7 : 1
          }}
        >
          {isLoading && action === "copy" ? "Copying..." : "Copy Brief"}
        </button>
        <button
          onClick={() => handleAction("pdf")}
          disabled={isLoading}
          style={{
            padding: "0.75rem 1.5rem",
            backgroundColor: "#dc2626",
            color: "white",
            border: "none",
            borderRadius: "0.5rem",
            fontSize: "0.875rem",
            fontWeight: "500",
            cursor: isLoading ? "not-allowed" : "pointer",
            opacity: isLoading && action === "pdf" ? 0.7 : 1
          }}
        >
          {isLoading && action === "pdf" ? "Generating..." : "Download PDF"}
        </button>
        <button
          onClick={() => handleAction("email")}
          disabled={isLoading}
          style={{
            padding: "0.75rem 1.5rem",
            backgroundColor: "#059669",
            color: "white",
            border: "none",
            borderRadius: "0.5rem",
            fontSize: "0.875rem",
            fontWeight: "500",
            cursor: isLoading ? "not-allowed" : "pointer",
            opacity: isLoading && action === "email" ? 0.7 : 1
          }}
        >
          {isLoading && action === "email" ? "Sending..." : "Email Brief"}
        </button>
      </div>

      {/* Brief Content */}
      <div style={{ 
        backgroundColor: "white", 
        borderRadius: "0.75rem", 
        boxShadow: "0 1px 3px 0 rgba(0, 0, 0, 0.1)",
        overflow: "hidden"
      }}>
        {sections.map((section, index) => (
          <div 
            key={index}
            style={{ 
              padding: "2rem", 
              borderBottom: index < sections.length - 1 ? "1px solid #e5e7eb" : "none"
            }}
          >
            <h2 style={{ 
              fontSize: "1.25rem", 
              fontWeight: "600", 
              marginBottom: "1rem",
              color: "#374151"
            }}>
              {section.title}
            </h2>
            <div style={{ 
              color: "#4b5563", 
              lineHeight: "1.6",
              whiteSpace: "pre-wrap"
            }}>
              {section.content}
            </div>
          </div>
        ))}
      </div>

      {/* Notes */}
      {brief.notes && (
        <div style={{ 
          marginTop: "2rem",
          backgroundColor: "#f9fafb", 
          padding: "1.5rem", 
          borderRadius: "0.75rem",
          border: "1px solid #e5e7eb"
        }}>
          <h3 style={{ 
            fontSize: "1rem", 
            fontWeight: "600", 
            marginBottom: "0.5rem",
            color: "#374151"
          }}>
            Additional Notes
          </h3>
          <p style={{ color: "#6b7280", lineHeight: "1.6" }}>
            {brief.notes}
          </p>
        </div>
      )}
    </div>
  )
}

